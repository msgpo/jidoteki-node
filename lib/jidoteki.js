// Generated by CoffeeScript 1.6.3
/*
 * Jidoteki - https://jidoteki.com
 * Build virtual appliances using Jidoteki
 * Copyright (c) 2014 Alex Williams, Unscramble <license@unscramble.jp>
*/


(function() {
  var api, armrest, crypto, settings;

  crypto = require('crypto');

  armrest = require('armrest');

  settings = {
    host: 'api.jidoteki.com',
    endpoint: process.env.JIDOTEKI_ENDPOINT || 'https://api.jidoteki.com',
    userid: process.env.JIDOTEKI_USERID || 'change me',
    apikey: process.env.JIDOTEKI_APIKEY || 'change me',
    logLevel: process.env.JIDOTEKI_LOGLEVEL || 'info',
    useragent: 'nodeclient-jidoteki/0.2.4',
    token: null,
    tries: 0
  };

  api = armrest.client(settings.endpoint);

  exports.settings = settings;

  exports.makeHMAC = function(string) {
    return crypto.createHmac('sha256', settings.apikey).update(string).digest('hex');
  };

  exports.getHeaders = function(apiVersion, requestType, signature, callback) {
    switch (requestType) {
      case 'token':
        return callback(null, {
          'Accept-Version': apiVersion,
          'Host': settings.host,
          'User-Agent': settings.useragent,
          'X-Auth-Uid': settings.userid,
          'X-Auth-Signature': signature,
          'Content-Type': 'application/json'
        });
      case 'get':
        return callback(null, {
          'Accept-Version': apiVersion,
          'Host': settings.host,
          'User-Agent': settings.useragent,
          'X-Auth-Token': settings.token,
          'X-Auth-Signature': signature
        });
      case 'post':
        return callback(null, {
          'Accept-Version': apiVersion,
          'Host': settings.host,
          'User-Agent': settings.useragent,
          'X-Auth-Token': settings.token,
          'X-Auth-Signature': signature,
          'Content-Type': 'application/json'
        });
      default:
        return callback(new Error("Invalid Request Type. Must be 'token', 'get' or 'post'"));
    }
  };

  exports.getToken = function(callback) {
    var signature;
    signature = this.makeHMAC("POSThttps://" + settings.host + "/auth/user");
    return this.getHeaders(1, 'token', signature, function(error, result) {
      return api.post({
        url: '/auth/user',
        headers: result,
        complete: function(err, data, res) {
          if (err) {
            settings.token = null;
            settings.tries = 1;
            return callback(err);
          } else {
            settings.token = res.content;
            settings.tries = 0;
            return callback(null, res);
          }
        }
      });
    });
  };

  exports.apiCall = function(apiVersion, method, resource, string, callback) {
    var signature;
    switch (method) {
      case 'GET':
        signature = this.makeHMAC("GEThttps://" + settings.host + resource);
        return this.getHeaders(apiVersion, 'get', signature, function(error, result) {
          return api.get({
            url: resource,
            headers: result,
            complete: function(err, data, res) {
              if (err) {
                return callback(err);
              }
              return callback(null, res);
            }
          });
        });
      case 'POST':
        signature = this.makeHMAC("POSThttps://" + settings.host + resource + (JSON.stringify(string)));
        return this.getHeaders(apiVersion, 'post', signature, function(error, result) {
          return api.post({
            url: resource,
            headers: result,
            params: string,
            complete: function(err, data, res) {
              if (err) {
                return callback(err);
              }
              return callback(null, res);
            }
          });
        });
      default:
        return callback(new Error('Invalid request method'));
    }
  };

  exports.makeRequest = function(apiVersion, requestMethod, resource, string, callback) {
    var _this = this;
    if (settings.tries >= 1) {
      return callback(new Error('Unable to authenticate'));
    }
    if (settings.token != null) {
      return this.apiCall(apiVersion, requestMethod.toUpperCase(), resource, string, function(err, res) {
        if (err) {
          if (err.status === 'error' && err.message === 'Unable to authenticate') {
            return _this.getToken(function(err, res) {
              return _this.makeRequest(apiVersion, requestMethod, resource, string, callback);
            });
          } else {
            return callback(err);
          }
        } else {
          return callback(null, res);
        }
      });
    } else {
      return this.getToken(function(err, res) {
        return _this.makeRequest(apiVersion, requestMethod, resource, string, callback);
      });
    }
  };

}).call(this);
