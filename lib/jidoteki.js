// Generated by CoffeeScript 1.6.3
/*
 * Jidoteki - https://jidoteki.com
 * Build virtual appliances using Jidoteki
 * Copyright (c) 2013 Alex Williams, Unscramble <license@unscramble.jp>
*/


(function() {
  var armrest, crypto, jido,
    _this = this,
    __slice = [].slice;

  crypto = require('crypto');

  armrest = require('armrest');

  jido = typeof exports !== "undefined" && exports !== null ? exports : this;

  jido.settings = {
    endpoint: 'https://api.jidoteki.com',
    userid: process.env.JIDOTEKI_USERID || 'change me',
    apikey: process.env.JIDOTEKI_APIKEY || 'change me',
    useragent: 'nodeclient-jidoteki/0.1.3',
    token: null
  };

  jido.api = armrest.client(jido.settings.endpoint);

  module.exports.makeHMAC = function(string, callback) {
    var hmac;
    hmac = crypto.createHmac('sha256', jido.settings.apikey).update(string).digest('hex');
    return callback(hmac);
  };

  module.exports.getToken = function(callback) {
    var resource;
    resource = '/auth/user';
    return _this.makeHMAC("POST" + jido.settings.endpoint + resource, function(signature) {
      return jido.api.post({
        url: resource,
        headers: {
          'X-Auth-Uid': jido.settings.userid,
          'X-Auth-Signature': signature,
          'User-Agent': jido.settings.useragent,
          'Accept-Version': 1,
          'Content-Type': 'application/json'
        },
        complete: function(err, res, data) {
          if (data.status === 'success') {
            jido.settings.token = data.content;
            setTimeout(function() {
              return jido.settings.token = null;
            }, 27000000);
          }
          return callback(data);
        }
      });
    });
  };

  module.exports.getData = function(resource, callback) {
    return _this.makeHMAC("GET" + jido.settings.endpoint + resource, function(signature) {
      return jido.api.get({
        url: resource,
        headers: {
          'X-Auth-Token': jido.settings.token,
          'X-Auth-Signature': signature,
          'User-Agent': jido.settings.useragent,
          'Accept-Version': 1
        },
        complete: function(err, res, data) {
          if (err) {
            if (data.status === 'error' && data.message === 'Unable to authenticate') {
              jido.settings.token = null;
            }
          }
          return callback(data);
        }
      });
    });
  };

  module.exports.postData = function(resource, string, callback) {
    return _this.makeHMAC("POST" + jido.settings.endpoint + resource + (JSON.stringify(string)), function(signature) {
      return jido.api.post({
        url: resource,
        params: string,
        headers: {
          'X-Auth-Token': jido.settings.token,
          'X-Auth-Signature': signature,
          'User-Agent': jido.settings.useragent,
          'Accept-Version': 1,
          'Content-Type': 'application/json'
        },
        complete: function(err, res, data) {
          if (err) {
            if (data.status === 'error' && data.message === 'Unable to authenticate') {
              jido.settings.token = null;
            }
          }
          return callback(data);
        }
      });
    });
  };

  module.exports.makeRequest = function() {
    var callback, newType, resource, string, type, _i;
    type = arguments[0], resource = arguments[1], string = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), callback = arguments[_i++];
    newType = type.toUpperCase();
    if (jido.settings.token !== null) {
      switch (newType) {
        case "GET":
          return _this.getData(resource, function(data) {
            return callback(data);
          });
        case "POST":
          return _this.postData(resource, string[0], function(data) {
            return callback(data);
          });
      }
    } else {
      return _this.getToken(function(result) {
        switch (newType) {
          case "GET":
            return jido.getData(resource, function(data) {
              return callback(data);
            });
          case "POST":
            return jido.postData(resource, string[0], function(data) {
              return callback(data);
            });
        }
      });
    }
  };

}).call(this);
